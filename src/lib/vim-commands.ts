
export const vimCommandData = {
  'Changing Vim Modes': [
    { cmd: 'i', desc: 'Enter INSERT mode to start typing text right before the cursor.' },
    { cmd: 'a', desc: 'Enter INSERT mode after the cursor (think: append).' },
    { cmd: 'A', desc: 'Enter INSERT mode at the very end of the current line (think: Append).' },
    { cmd: 'o', desc: 'Open a new line below the current line and enter INSERT mode.' },
    { cmd: 'O', desc: 'Open a new line above the current line and enter INSERT mode.' },
    { cmd: 'v', desc: 'Enter VISUAL mode for character-by-character selection.' },
    { cmd: 'Ctrl-v', desc: 'Enter VISUAL-BLOCK mode to select text in rectangular columns.' },
    { cmd: ':', desc: 'Enter COMMAND-LINE mode at the bottom of the screen to run commands like :w or :q.' },
    { cmd: 'R', desc: 'Enter REPLACE mode to overwrite text character by character as you type.' },
    { cmd: 'ESC', desc: 'The universal key to return to NORMAL mode from any other mode.' },
  ],
  'Exiting': [
    { cmd: ':w', desc: 'Write (save) the current state of the file without exiting.' },
    { cmd: ':wa', desc: 'Write (save) all currently open files.' },
    { cmd: ':q', desc: 'Quit the current file. This will fail if there are any unsaved changes.' },
    { cmd: ':q!', desc: 'Force quit and discard any unsaved changes. Use with caution!' },
    { cmd: ':wq or :x', desc: 'Write (save) the file and then quit. A very common command.' },
    { cmd: ':wqa', desc: 'Write (save) and quit all currently open files.' },
  ],
  'Moving Around': [
    { cmd: 'h', desc: 'Move the cursor one character to the left.' },
    { cmd: 'j', desc: 'Move the cursor one line down.' },
    { cmd: 'k', desc: 'Move the cursor one line up.' },
    { cmd: 'l', desc: 'Move the cursor one character to the right.' },
  ],
  'Movements Within A Line': [
      { cmd: '$', desc: 'Jump to the end of the current line.' },
      { cmd: '0', desc: 'Jump to the absolute beginning of the line (column 0).' },
      { cmd: '^', desc: 'Jump to the first non-whitespace character on the line.' },
      { cmd: 'fx', desc: 'Find and jump to the next occurrence of character ‘x’ on the line.' },
      { cmd: 'Fx', desc: 'Find and jump to the previous occurrence of character ‘x’ on the line.' },
      { cmd: 'tx', desc: 'Jump to the position just before the next character ‘x’.' },
      { cmd: 'Tx', desc: 'Jump to the position just after the previous character ‘x’.' },
      { cmd: ';', desc: 'Repeat the last f, F, t, or T movement in the same direction.' },
      { cmd: ',', desc: 'Repeat the last f, F, t, or T movement in the opposite direction.' },
  ],
  'Word Movements': [
      { cmd: 'w', desc: 'Jump forward to the start of the next word.' },
      { cmd: 'W', desc: 'Jump forward to the start of the next WORD (ignoring punctuation).' },
      { cmd: 'b', desc: 'Jump backward to the start of the previous word.' },
      { cmd: 'B', desc: 'Jump backward to the start of the previous WORD.' },
      { cmd: 'e', desc: 'Jump forward to the end of the current or next word.' },
      { cmd: 'E', desc: 'Jump forward to the end of the current or next WORD.' },
      { cmd: 'ge', desc: 'Jump backward to the end of the previous word.' },
      { cmd: 'gE', desc: 'Jump backward to the end of the previous WORD.' },
  ],
  'Sentence & Paragraph Movements': [
      { cmd: ')', desc: 'Jump to the beginning of the next sentence.' },
      { cmd: '(', desc: 'Jump to the beginning of the previous sentence.' },
      { cmd: '}', desc: 'Jump to the next paragraph break (a blank line).' },
      { cmd: '{', desc: 'Jump to the previous paragraph break.' },
  ],
  'Moving To Specific Lines': [
      { cmd: 'gg', desc: 'Go to the very first line of the file.' },
      { cmd: 'G', desc: 'Go to the very last line of the file.' },
      { cmd: '{number}G', desc: 'Jump to a specific line number (e.g., `10G` goes to line 10).' },
      { cmd: '{number}j', desc: 'Move down a specific number of lines (e.g., `5j` moves down 5 lines).' },
      { cmd: '{number}k', desc: 'Move up a specific number of lines (e.g., `5k` moves up 5 lines).' },
      { cmd: 'H', desc: 'Move to the High (top) line visible on the screen.' },
      { cmd: 'M', desc: 'Move to the Middle line visible on the screen.' },
      { cmd: 'L', desc: 'Move to the Low (bottom) line visible on the screen.' },
  ],
  'Bracket & Method Navigation': [
      { cmd: '%', desc: 'Jump between matching pairs of (), {}, []. Place cursor on one and press %.' },
      { cmd: '[(', desc: 'Jump to the previous unmatched opening parenthesis `(`.' },
      { cmd: '[{', desc: 'Jump to the previous unmatched opening curly brace `{`.' },
      { cmd: '])', desc: 'Jump to the next unmatched closing parenthesis `)`.' },
      { cmd: ']}', desc: 'Jump to the next unmatched closing curly brace `}`.' },
      { cmd: ']m', desc: 'Jump to the start of the next method (language-aware).' },
      { cmd: ']M', desc: 'Jump to the end of the next method.' },
      { cmd: '[m', desc: 'Jump to the start of the previous method.' },
      { cmd: '[M', desc: 'Jump to the end of the previous method.' },
  ],
  'Screen & Scrolling': [
      { cmd: 'Ctrl-F', desc: 'Move forward one full screen (page down).' },
      { cmd: 'Ctrl-B', desc: 'Move backward one full screen (page up).' },
      { cmd: 'Ctrl-D', desc: 'Move down half a screen.' },
      { cmd: 'Ctrl-U', desc: 'Move up half a screen.' },
      { cmd: 'zz', desc: 'Center the current line in the middle of the screen.' },
      { cmd: 'zt', desc: 'Place the current line at the top of the screen.' },
      { cmd: 'zb', desc: 'Place the current line at the bottom of the screen.' },
      { cmd: 'Ctrl-E', desc: 'Scroll the screen down one line without moving the cursor.' },
      { cmd: 'Ctrl-Y', desc: 'Scroll the screen up one line without moving the cursor.' },
  ],
  'Search & Jumps': [
    { cmd: '/pattern', desc: 'Search forward for the specified pattern.' },
    { cmd: '?pattern', desc: 'Search backward for the specified pattern.' },
    { cmd: '*', desc: 'Search forward for the complete word currently under the cursor.' },
    { cmd: '#', desc: 'Search backward for the complete word currently under the cursor.' },
    { cmd: 'n', desc: 'Repeat the last search in the same direction.' },
    { cmd: 'N', desc: 'Repeat the last search in the opposite direction.' },
    { cmd: 'Ctrl-O', desc: 'Go to the previous (older) location in the jump list.' },
    { cmd: 'Ctrl-I', desc: 'Go to the next (newer) location in the jump list.' },
  ],
  'Editing Text': [
    { cmd: 'd{motion}', desc: 'Delete text over the given motion (e.g., `dw` to delete a word).' },
    { cmd: 'dd', desc: 'Delete the entire current line.' },
    { cmd: 'D', desc: 'Delete from the cursor to the end of the line.' },
    { cmd: 'x', desc: 'Delete the single character under the cursor.' },
    { cmd: 'y{motion}', desc: 'Yank (copy) text over the given motion (e.g., `yw` to copy a word).' },
    { cmd: 'yy', desc: 'Yank (copy) the entire current line.' },
    { cmd: 'p', desc: 'Put (paste) the copied text after the cursor.' },
    { cmd: 'P', desc: 'Put (paste) the copied text before the cursor.' },
    { cmd: 'c{motion}', desc: 'Change (delete and enter INSERT mode) text over the motion.' },
    { cmd: 'cc', desc: 'Change (delete and enter INSERT mode) the entire line.' },
    { cmd: '.', desc: 'Repeat the last change command (e.g., insert, delete, or change).' },
    { cmd: 'u', desc: 'Undo the last change.' },
    { cmd: 'Ctrl-R', desc: 'Redo changes that were undone.' },
    { cmd: 'r{char}', desc: 'Replace the single character under the cursor with {char}.' },
  ],
  'Search & Replace': [
    { cmd: ':%s/old/new/g', desc: 'Replace all occurrences of "old" with "new" in the entire file.' },
    { cmd: ':%s/old/new/gc', desc: 'Replace all, but ask for confirmation for each occurrence.' },
    { cmd: ':%s/old/new/gi', desc: 'Replace all, ignoring whether the text is uppercase or lowercase.' },
  ],
  'Indentation & Case': [
    { cmd: '>>', desc: 'Indent the current line one level to the right.' },
    { cmd: '<<', desc: 'Un-indent the current line one level to the left.' },
    { cmd: '>{motion}', desc: 'Indent the lines covered by the motion.' },
    { cmd: '~', desc: 'Switch the case (upper/lower) of the character under the cursor.' },
    { cmd: 'guu', desc: 'Make the entire current line lowercase.' },
    { cmd: 'gUU', desc: 'Make the entire current line uppercase.' },
  ],
  'Text Objects': [
    { cmd: 'iw / aw', desc: 'Select text inside / around a word.' },
    { cmd: 'ip / ap', desc: 'Select text inside / around a paragraph.' },
    { cmd: 'i" / a"', desc: 'Select text inside / around double quotes.' },
    { cmd: "i' / a'", desc: 'Select text inside / around single quotes.' },
    { cmd: 'i( / a(', desc: 'Select text inside / around parentheses.' },
    { cmd: 'i[ / a[', desc: 'Select text inside / around square brackets.' },
    { cmd: 'i{ / a{', desc: 'Select text inside / around curly braces.' },
    { cmd: 'it / at', desc: 'Select text inside / around HTML/XML tags.' },
    { cmd: 'diw', desc: '`d`elete `i`nside `w`ord (deletes the word under the cursor).' },
    { cmd: 'ci"', desc: '`c`hange `i`nside `"` (deletes text inside quotes and enters insert mode).' },
    { cmd: 'yap', desc: '`y`ank `a`round `p`aragraph (copies the whole paragraph including whitespace).' },
    { cmd: 'vit', desc: '`v`isually select text `i`nside a `t`ag.' },
  ]
};

export const slugify = (text: string) => {
    return text.toLowerCase().replace(/\s+/g, '-').replace(/[^\w-]+/g, '');
};

export const unslugify = (slug: string) => {
    return slug.replace(/-/g, ' ').replace(/\b\w/g, l => l.toUpperCase());
}
